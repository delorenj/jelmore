services:
  # Jelmore API service
  jelmore:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jelmore-api
    restart: unless-stopped
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://jelmore:${POSTGRES_PASSWORD:-jelmore_dev}@postgres:5432/jelmore
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=40

      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_MAX_CONNECTIONS=50

      # NATS
      - NATS_URL=nats://nats:4222
      - NATS_CLUSTER_ID=jelmore-cluster
      - NATS_CLIENT_ID=jelmore-api

      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8687
      - API_PREFIX=/api/v1

      # Authentication
      - API_KEY_ADMIN=${API_KEY_ADMIN:-}
      - API_KEY_CLIENT=${API_KEY_CLIENT:-}
      - API_KEY_READONLY=${API_KEY_READONLY:-}
      - API_KEY_HEADER=X-API-Key

      # Session Management
      - MAX_CONCURRENT_SESSIONS=50
      - SESSION_CLEANUP_INTERVAL_SECONDS=300
      - SESSION_DEFAULT_TIMEOUT_SECONDS=7200

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json

      # CORS
      - CORS_ORIGINS=https://delo.sh,https://*.delo.sh,http://localhost,http://localhost:3000,http://localhost:3360

      # Claude Code
      - CLAUDE_CODE_BIN=claude
      - CLAUDE_CODE_MAX_TURNS=20
      - CLAUDE_CODE_TIMEOUT_SECONDS=600
    volumes:
      - ./logs:/app/logs
    labels:
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.jelmore.rule=Host(`jelmore.delo.sh`) || Host(`api.jelmore.delo.sh`) || Host(`delo.sh`)"
      - "traefik.http.routers.jelmore.service=jelmore"
      - "traefik.http.routers.jelmore.tls=true"
      - "traefik.http.routers.jelmore.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jelmore.middlewares=security-headers@file,rate-limit@file,gzip-compression@file"

      # API Router (more restrictive)
      - "traefik.http.routers.jelmore-api.rule=(Host(`jelmore.delo.sh`) || Host(`api.jelmore.delo.sh`) || Host(`jelmore.delo.sh`)) && PathPrefix(`/api/`)"
      - "traefik.http.routers.jelmore-api.service=jelmore"
      - "traefik.http.routers.jelmore-api.tls=true"
      - "traefik.http.routers.jelmore-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jelmore-api.middlewares=security-headers@file,api-rate-limit@file,api-cors@file,gzip-compression@file,circuit-breaker@file"
      - "traefik.http.routers.jelmore-api.priority=100"

      # Health Check Router (no auth, minimal middleware)
      - "traefik.http.routers.jelmore-health.rule=(Host(`jelmore.local`) || Host(`api.jelmore.delo.sh`) || Host(`jelmore.delo.sh`)) && Path(`/health`)"
      - "traefik.http.routers.jelmore-health.service=jelmore"
      - "traefik.http.routers.jelmore-health.middlewares=security-headers@file"
      - "traefik.http.routers.jelmore-health.priority=200"

      # Service Configuration
      - "traefik.http.routers.jelmore-health.rule=(Host(`jelmore.local`) || Host(`api.jelmore.delo.sh`) || Host(`jelmore.delo.sh`)) && Path(`/health`)"
      - "traefik.http.services.jelmore.loadbalancer.server.port=8687"
      - "traefik.http.services.jelmore.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.jelmore.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.jelmore.loadbalancer.healthcheck.timeout=5s"
      - "traefik.http.services.jelmore.loadbalancer.healthcheck.scheme=http"

      # Load Balancer Settings
      - "traefik.http.services.jelmore.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.jelmore.loadbalancer.sticky.cookie.name=jelmore_session"
      - "traefik.http.services.jelmore.loadbalancer.sticky.cookie.secure=true"
      - "traefik.http.services.jelmore.loadbalancer.sticky.cookie.httponly=true"

      # Metrics and Monitoring
      - "traefik.http.routers.jelmore-metrics.rule=(Host(`jelmore.local`) || Host(`api.jelmore.delo.sh`)) && Path(`/metrics`)"
      - "traefik.http.routers.jelmore-metrics.service=jelmore"
      - "traefik.http.routers.jelmore-metrics.middlewares=admin-auth@file"
    networks:
      - proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8687/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Networks
networks:
  proxy:
    external: true
